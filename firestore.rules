
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ===== USERS COLLECTION =====
    // Usuários podem ver perfis públicos, mas só editar o próprio
    match /users/{userId} {
      // Permitir leitura de perfis públicos (para mostrar profissionais)
      allow read: if true;

      // Apenas o dono pode criar/atualizar seu perfil
      allow create: if request.auth != null &&
                       request.auth.uid == userId &&
                       request.auth.uid == resource.data.uid;

      allow update: if request.auth != null &&
                       request.auth.uid == userId &&
                       request.auth.uid == resource.data.uid;

      // Ninguém pode deletar usuários (apenas admin)
      allow delete: if false;
    }

    // ===== EQUIPMENTS COLLECTION =====
    // Equipamentos podem ser visualizados publicamente quando disponíveis
    match /equipments/{equipmentId} {
      // Qualquer pessoa pode ver equipamentos disponíveis
      allow read: if resource.data.available == true;

      // Apenas usuários autenticados podem criar equipamentos
      allow create: if request.auth != null &&
                       request.auth.uid == resource.data.ownerId &&
                       resource.data.ownerId is string &&
                       resource.data.name is string &&
                       resource.data.category is string &&
                       resource.data.negotiationType in ['sale', 'rent', 'free'] &&
                       resource.data.condition in ['new', 'used', 'refurbished'] &&
                       resource.data.city is string &&
                       resource.data.state is string &&
                       resource.data.available == true;

      // Apenas o dono pode atualizar ou deletar
      allow update: if request.auth != null &&
                       request.auth.uid == resource.data.ownerId;

      allow delete: if request.auth != null &&
                       request.auth.uid == resource.data.ownerId;
    }

    // ===== BOOKINGS COLLECTION =====
    // Agendamentos são privados entre cliente e profissional
    match /bookings/{bookingId} {
      // Apenas cliente e profissional envolvidos podem ver
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.clientId ||
         request.auth.uid == resource.data.professionalId);

      // Qualquer usuário autenticado pode criar agendamento
      allow create: if request.auth != null &&
                       request.auth.uid == resource.data.clientId &&
                       resource.data.clientId is string &&
                       resource.data.professionalId is string &&
                       resource.data.serviceType is string &&
                       resource.data.date is timestamp &&
                       resource.data.status in ['pending', 'confirmed', 'completed', 'cancelled'];

      // Cliente e profissional podem atualizar status
      allow update: if request.auth != null &&
        (request.auth.uid == resource.data.clientId ||
         request.auth.uid == resource.data.professionalId) &&
        // Só permitir atualizar campos específicos
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'notes', 'updatedAt']);

      // Ninguém pode deletar agendamentos (apenas admin)
      allow delete: if false;
    }

    // ===== AVAILABILITIES COLLECTION =====
    // Disponibilidades dos profissionais são públicas para agendamento
    match /availabilities/{availabilityId} {
      // Qualquer pessoa pode ver disponibilidade (para agendar)
      allow read: if true;

      // Apenas o profissional dono pode criar/editar disponibilidade
      allow create: if request.auth != null &&
                       request.auth.uid == resource.data.professionalId &&
                       resource.data.professionalId is string &&
                       resource.data.date is timestamp;

      allow update: if request.auth != null &&
                       request.auth.uid == resource.data.professionalId;

      allow delete: if request.auth != null &&
                       request.auth.uid == resource.data.professionalId;
    }

    // ===== REVIEWS COLLECTION =====
    // Avaliações são públicas para construir reputação
    match /reviews/{reviewId} {
      // Qualquer pessoa pode ver avaliações
      allow read: if true;

      // Apenas o cliente que contratou pode criar avaliação
      allow create: if request.auth != null &&
                       request.auth.uid == resource.data.clientId &&
                       resource.data.clientId is string &&
                       resource.data.professionalId is string &&
                       resource.data.bookingId is string &&
                       resource.data.rating is number &&
                       resource.data.rating >= 1 &&
                       resource.data.rating <= 5;

      // Ninguém pode editar ou deletar avaliações (imutáveis)
      allow update: if false;
      allow delete: if false;
    }

    // ===== SERVICE REQUESTS COLLECTION =====
    // Solicitações de serviço são privadas entre cliente e profissional
    match /service_requests/{requestId} {
      // Apenas cliente e profissional envolvidos podem ver
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.clientId ||
         request.auth.uid == resource.data.professionalId);

      // Qualquer usuário autenticado pode criar solicitação
      allow create: if request.auth != null &&
                       request.auth.uid == resource.data.clientId &&
                       resource.data.clientId is string &&
                       resource.data.professionalId is string &&
                       resource.data.type in ['quote', 'booking'] &&
                       resource.data.serviceType is string &&
                       resource.data.location is string &&
                       resource.data.status in ['pending', 'accepted', 'rejected', 'completed'];

      // Cliente e profissional podem atualizar status
      allow update: if request.auth != null &&
        (request.auth.uid == resource.data.clientId ||
         request.auth.uid == resource.data.professionalId) &&
        // Só permitir atualizar campos específicos
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'description', 'date', 'price', 'updatedAt']);

      // Ninguém pode deletar solicitações ativas
      allow delete: if request.auth != null &&
                       resource.data.status in ['completed', 'rejected'];
    }

    // ===== BLOQUEAR ACESSO A OUTRAS COLLECTIONS =====
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
